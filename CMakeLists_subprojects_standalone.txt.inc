GET_FILENAME_COMPONENT(SUBDIRNAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)

ADD_DEFINITIONS(-DNUM_CHANNELS=${NUM_CHANNELS})

IF( DEFINED SPECIFIC_PROJECTNAME )
	# this is for ambix_decoder (which shares the code of ambix_binaural)
	SET (SUBPROJECT_NAME ${SPECIFIC_PROJECTNAME}${NUM_CHANNELS})
ELSE( DEFINED SPECIFIC_PROJECTNAME )
	# this is the normal way...
	SET (SUBPROJECT_NAME ${SUBDIRNAME}${NUM_CHANNELS})
ENDIF(DEFINED SPECIFIC_PROJECTNAME )

# set the jack client name
ADD_DEFINITIONS(-DJUCE_JACK_CLIENT_NAME="${SUBPROJECT_NAME}")

IF(APPLE)
	# switch to c++11
	ADD_DEFINITIONS(
		-std=c++11
	)
ENDIF (APPLE)

# add the folder with Juce includes
INCLUDE_DIRECTORIES ( JuceLibraryCode )

ADD_DEFINITIONS(-DJUCE_APP_CONFIG_HEADER=<AppConfig.h>)

ADD_DEFINITIONS(-DJUCE_STANDALONE_APPLICATION=1)

IF(DEFINED SPECIFIC_SOURE_DIR)
	INCLUDE_DIRECTORIES ( ${SPECIFIC_SOURE_DIR}/JuceLibraryCode )
ENDIF(DEFINED SPECIFIC_SOURE_DIR)

# add all c, cpp, cc files from the Source directory
FILE ( GLOB_RECURSE SOURCE Source/*.c* )
FILE ( GLOB_RECURSE HEADER Source/*.h* )

IF(DEFINED SPECIFIC_SOURE_DIR)
	FILE ( GLOB_RECURSE SOURCE ${SPECIFIC_SOURE_DIR}/Source/*.c* )
	FILE ( GLOB_RECURSE HEADER ${SPECIFIC_SOURE_DIR}/Source/*.h* )
ENDIF(DEFINED SPECIFIC_SOURE_DIR)

FILE ( GLOB_RECURSE SOURCE_2 ${SRC_DIR}/JUCE/standalone-filter/*.c* )
FILE ( GLOB_RECURSE HEADER_2 ${SRC_DIR}/JUCE/standalone-filter/*.h* )
LIST ( APPEND SOURCE ${SOURCE_2})
LIST ( APPEND HEADER ${HEADER_2})

LIST ( SORT SOURCE )
LIST ( SORT HEADER )


set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_DIR}/_bin/standalone)

IF(UNIX AND NOT APPLE AND NOT ANDROID)
    ADD_EXECUTABLE(${SUBPROJECT_NAME} ${SOURCE} ${HEADER} ${JUCE_STANDALONE_SOURCE})
ENDIF(UNIX AND NOT APPLE AND NOT ANDROID)

IF (WIN32)
    ADD_EXECUTABLE(${SUBPROJECT_NAME} WIN32 ${SOURCE} ${HEADER} ${JUCE_STANDALONE_SOURCE})
ENDIF (WIN32)

IF(NOT APPLE)
	TARGET_LINK_LIBRARIES( ${SUBPROJECT_NAME}
		${JUCE_LIBRARIES}
		${JUCE_STATIC_LIB}
	)
	
	# get the target folder for later copying it
	GET_TARGET_PROPERTY(FILEPATH ${SUBPROJECT_NAME} LOCATION)
ENDIF(NOT APPLE)


IF(APPLE)

	ADD_EXECUTABLE(${SUBPROJECT_NAME} MACOSX_BUNDLE ${SOURCE} ${HEADER} ${JUCE_STANDALONE_SOURCE})


	# MESSAGE( STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH} )

	#prototype Info.plist
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${SRC_DIR}/osx_ressources/MacOSXBundleInfo.plist.in)

	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES BUNDLE TRUE)
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES BUNDLE_EXTENSION vst)
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_VERSION ${VERSION})
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES MACOSX_BUNDLE_SHORT_VERSION_STRING ${VERSION})
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES MACOSX_BUNDLE_LONG_VERSION_STRING ${VERSION})
	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME ${SUBPROJECT_NAME})


	SET_TARGET_PROPERTIES(${SUBPROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${BIN_DIR})

	# link libs
	TARGET_LINK_LIBRARIES( ${SUBPROJECT_NAME}
		${JUCE_LIBRARIES}
		${JUCE_STATIC_LIB}
	)

ENDIF(APPLE)

IF(UNIX AND NOT APPLE AND NOT ANDROID)
	ADD_CUSTOM_COMMAND(
		TARGET ${SUBPROJECT_NAME} POST_BUILD 
		COMMAND ${CMAKE_COMMAND} 
		ARGS -E copy ${FILEPATH} ${BIN_DIR}/_bin/${SUBPROJECT_NAME}
	)
ENDIF(UNIX AND NOT APPLE AND NOT ANDROID)

IF(WIN32)

	ADD_CUSTOM_COMMAND(
		TARGET ${SUBPROJECT_NAME} POST_BUILD 
		COMMAND ${CMAKE_COMMAND} 
		ARGS -E copy ${FILEPATH} ${BIN_DIR}/_bin/${SUBPROJECT_NAME}.exe
	)
ENDIF(WIN32)


IF(WITH_FFTW3)

	# MESSAGE( STATUS "LINKING FFTW3F: " ${FFTW3F_LIBRARY} )
	
	TARGET_LINK_LIBRARIES( ${SUBPROJECT_NAME}
	
		${FFTW3F_LIBRARY}
	)
ENDIF(WITH_FFTW3)

IF(WITH_LIBSOXR)
	TARGET_LINK_LIBRARIES( ${SUBPROJECT_NAME}
		${LIBSOXR_LIBRARIES}
	)
ENDIF(WITH_LIBSOXR)

IF(WIN32)
  IF (WITH_LIBLO OR WITH_FFTW3)
    TARGET_LINK_LIBRARIES( ${SUBPROJECT_NAME}
		  ${CMAKE_THREAD_LIBS_INIT}
      )
  ENDIF (WITH_LIBLO OR WITH_FFTW3)
ENDIF(WIN32)


################################################
# change to static linking for ms visual c++
IF(WIN32)

set(CompilerFlags
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE
        )
foreach(CompilerFlag ${CompilerFlags})
  string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
endforeach()

ENDIF(WIN32)

