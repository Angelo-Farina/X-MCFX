--- /Users/matthias/SDKs/JUCE/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp	2016-11-26 22:37:00.000000000 +0100
+++ juce_linux_JackAudio.cpp	2016-12-06 19:03:59.000000000 +0100
@@ -170,30 +170,8 @@
         {
             juce::jack_set_error_function (errorCallback);
 
-            // open input ports
-            const StringArray inputChannels (getInputChannelNames());
-            for (int i = 0; i < inputChannels.size(); ++i)
-            {
-                String inputName;
-                inputName << "in_" << ++totalNumberOfInputChannels;
-
-                inputPorts.add (juce::jack_port_register (client, inputName.toUTF8(),
-                                                          JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
-            }
+            // add ports when clear how much we need!
 
-            // open output ports
-            const StringArray outputChannels (getOutputChannelNames());
-            for (int i = 0; i < outputChannels.size(); ++i)
-            {
-                String outputName;
-                outputName << "out_" << ++totalNumberOfOutputChannels;
-
-                outputPorts.add (juce::jack_port_register (client, outputName.toUTF8(),
-                                                           JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
-            }
-
-            inChans.calloc (totalNumberOfInputChannels + 2);
-            outChans.calloc (totalNumberOfOutputChannels + 2);
         }
     }
 
@@ -257,6 +235,29 @@
 
         lastError.clear();
         close();
+        // std::cout << "Num Ins: " << inputChannels.getHighestBit()+1 << " Outputs: " << outputChannels.getHighestBit()+1 << std::endl;
+        // open input ports
+            for (int i = 0; i < inputChannels.getHighestBit()+1; ++i)
+            {
+                String inputName;
+                inputName << "in_" << ++totalNumberOfInputChannels;
+
+                inputPorts.add (juce::jack_port_register (client, inputName.toUTF8(),
+                                                          JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
+            }
+
+            // open output ports
+            for (int i = 0; i < outputChannels.getHighestBit()+1; ++i)
+            {
+                String outputName;
+                outputName << "out_" << ++totalNumberOfOutputChannels;
+
+                outputPorts.add (juce::jack_port_register (client, outputName.toUTF8(),
+                                                           JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
+            }
+
+            inChans.calloc (totalNumberOfInputChannels + 2);
+            outChans.calloc (totalNumberOfOutputChannels + 2);
 
         juce::jack_set_process_callback (client, processCallback, this);
         juce::jack_set_port_connect_callback (client, portConnectCallback, this);
@@ -264,6 +265,8 @@
         juce::jack_activate (client);
         deviceIsOpen = true;
 
+        // do not auto connect!
+        /*
         if (! inputChannels.isZero())
         {
             for (JackPortIterator i (client, true); i.next();)
@@ -289,6 +292,7 @@
                 }
             }
         }
+	*/
 
         updateActivePorts();
 
