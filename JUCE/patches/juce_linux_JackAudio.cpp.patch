--- ../JUCE/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp	2014-01-08 16:01:16.844000260 +0200
+++ JUCE/modules/juce_audio_devices/native/juce_linux_JackAudio.cpp	2014-01-23 10:36:56.288000005 +0200
@@ -168,33 +168,13 @@
         }
         else
         {
+					
             juce::jack_set_error_function (errorCallback);
-
-            // open input ports
-            const StringArray inputChannels (getInputChannelNames());
-            for (int i = 0; i < inputChannels.size(); ++i)
-            {
-                String inputName;
-                inputName << "in_" << ++totalNumberOfInputChannels;
-
-                inputPorts.add (juce::jack_port_register (client, inputName.toUTF8(),
-                                                          JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
-            }
-
-            // open output ports
-            const StringArray outputChannels (getOutputChannelNames());
-            for (int i = 0; i < outputChannels.size (); ++i)
-            {
-                String outputName;
-                outputName << "out_" << ++totalNumberOfOutputChannels;
-
-                outputPorts.add (juce::jack_port_register (client, outputName.toUTF8(),
-                                                           JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
-            }
-
-            inChans.calloc (totalNumberOfInputChannels + 2);
-            outChans.calloc (totalNumberOfOutputChannels + 2);
+					
+						// add ports when clear how much we need!
+            
         }
+       
     }
 
     ~JackAudioIODevice()
@@ -257,13 +237,38 @@
 
         lastError.clear();
         close();
+				// std::cout << "Num Ins: " << inputChannels.getHighestBit()+1 << " Outputs: " << outputChannels.getHighestBit()+1 << std::endl;
+				// open input ports
+            for (int i = 0; i < inputChannels.getHighestBit()+1; ++i)
+            {
+                String inputName;
+                inputName << "in_" << ++totalNumberOfInputChannels;
+
+                inputPorts.add (juce::jack_port_register (client, inputName.toUTF8(),
+                                                          JACK_DEFAULT_AUDIO_TYPE, JackPortIsInput, 0));
+            }
 
+            // open output ports
+            for (int i = 0; i < outputChannels.getHighestBit()+1; ++i)
+            {
+                String outputName;
+                outputName << "out_" << ++totalNumberOfOutputChannels;
+
+                outputPorts.add (juce::jack_port_register (client, outputName.toUTF8(),
+                                                           JACK_DEFAULT_AUDIO_TYPE, JackPortIsOutput, 0));
+            }
+
+            inChans.calloc (totalNumberOfInputChannels + 2);
+            outChans.calloc (totalNumberOfOutputChannels + 2);
+            
         juce::jack_set_process_callback (client, processCallback, this);
         juce::jack_set_port_connect_callback (client, portConnectCallback, this);
         juce::jack_on_shutdown (client, shutdownCallback, this);
         juce::jack_activate (client);
         deviceIsOpen = true;
-
+				
+				// do not auto connect!
+				/*
         if (! inputChannels.isZero())
         {
             for (JackPortIterator i (client, true); i.next();)
@@ -289,6 +294,7 @@
                 }
             }
         }
+        */
 
         return lastError;
     }
